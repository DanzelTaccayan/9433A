What is network??
Network - Interconnecting devices that communicate with each other
(to share resources)
		- also called networks of networks
		- characterized by different nodes
Two types (correct me if im wrong)
	*Hardware
		E.g. Computer, laptop, desktop, routers,switch,hub
		-interconnection technology
			o Wired - fibre, UDB TCP
			o Wireless - infrared (remote control), bluetooth

	*Software
		-Difference Protocols
			o Follow certain rules
			o E.g. Computers cannot send their transmission at the same time that is why protocols exist to fix the flow
					- Serial - a bit per transmission
			o Put source and its destination
					- where to give and to receive
			o Sending Big files
					- Chopping them into smaller pieces which is the work of protocols
			o Packets - smaller pieces of data from a very big data that is being send / recieved.(chopped data)
	IPv4 - 32 bit -> 4 bytes
	IPv6 - 128 bit -> 8 bytes

History
1969 DARPA

HTTP (Hypertext Transfer Protocol) - underlying protocol used by the World Wide Web and this protocol defineshow messages are formatted and transmitted.

W3C - World Wide Web Consortium
IETF- Internet Engineering Task Force

HTTP 0.9 (1991) - The standard HTTP
HTTP 1.0 (RFC 1945, 1996)
HTTP 1.1 (RFC 2068 Jan 1999, RFC 2616 Jun 1999), RFC 7230-7235 (Jun 2014)
HTTP 2 (RFC 7540 May 2015)

HTTP - higher level protocol
     - port 80 (default)
     - internal communication
     - digital certificates used in encrypting informations
     
-HTTP is based on a client server architecture
	-clients AKA user agents(UA)
		-web browsers, web crawlers/spiders, other end user tools and applications
*IANA - allocates certain ports to certain allocations
*port 80 = default
	-servers
		-origin servers
		-proxy servers, gateways, tunnels
HTTP uses a request-response standard protocol
	-the client sends an HTTP request message to the server
	-the server processes the request and replies with an HTTP response message
HTTP is a stateless communications protocol
	-servers dont keep information about clients in between requests

"encrypts" - algorithm; transform a data to another data with the same content.

Socket - IP address and port number
Port numbers are from 0-64K

Client-Server Architecture
*FTP
*Peer to Peer
*HTTP
*Games

*Clients a.k.a user agents
- any application that communicates with an HTTP server
using the HTTP protocol

Web Crawlers/Spiders
	-used for search engine, to show related keywords when a client searches for something.
	-Google bot

*Servers - Origin, Proxy, Tunnel
	Origin Server - Physically there
				  - Machine with application(typically a web server)
				  - Waits for requests in port 80
				  - when a client connects to a server "Its never a direct connection", it can be the case that a user is connected to a proxy or gateway before reaching the origin server.
	Tunnel - Blind Relay between two points
			- Encryption Tunnel
			-Forwards the communication without knowing the data
	"Any server using HTTP is an HTTP server"
	"A server can also be a client"
			- E.g. A client requests from a proxy server , the proxy server(The server which would now become a client) will then go and requests from a gateway.
	"Server doesnt initiate request but with the PULL protocol in HTTP 2.0 it is possible"

Origin server - physical web servers with different resources
	      - machine with an application running

Proxy server - intermediate machine; for authentication

Gateway - ISP (Internet service provider)

Request response chain -  no direct communication
Encryption tunnel - allows HTTP traffic to pass through.

pull protocol - client -> http request message -> server -> http response message -> client
	   - client always pulls from server by request

push control - allows a web server to send resources to a web browser before the browser gets to request them.
             - server can't volunteer to give information

"polling" - is the continuous checking of other programs or devices by one progam or device to see what state they are in, usually to see whether they are still connected or want to communicate.

HTTP provides support for other functionalities such as:
	-cahce control
	-content media type(MIME) specification
	-language and character set specification
	-content/transfer codings
	-content negotiation
	-client server protocol negotiations

Stateless - servers do not keep information about clients in-between requests.

Cache control - restores certain things on the storage location

Content media type (MIME) specification
MIME - Multipurpose Internet Mail Extensions (e.g. text/html, img/png)
     - Web uses MIME to identify what type of media it is so that the other end could know how to process it.
     
Content Negotiation
 - Servers should know how to handle files that are being sent
 	e.g. A compressed file should be decompressable
 - Server- Client must agree

Client Server Protocol Negotiations
	* Non-Persistent Connection:
		Only available on HTTP 1.0 or HTTP 0.9
		follows 4 steps:
		1. Connection
		2. Request
		3. Response
		4. Disconnection
		- A cycle because in requesting you need to do the 4 steps above, the cycle must be first completed before requesting another request.
		- Solution to Non-Persisten Connection are Persistent Connection

	* Persistent Connection:
		Request - sends an info about your request
		- available in HTTP 1.1
		- the connection is open for a brief of time

		Request Pipelining
		 - First and second request can be sent one after another you dont need to wait until it is finished not like Non Persistent connections.

*HTTP Addressing
 URI: consists of a URN and a URL
 	URN: Unique name for some resource
 	URL: Where the resource is(digital resource)
 		-parts: 
 			*Scheme (http or https)
 			  >file - local resource
 			  >http - web resource
 			*User info or authentication ccred
 			  >authority -deprecated
 			*Host - domain name of IP address: resolved to an IP address using DNS of the server where the resource resides
 			*Port Number
 			*Path to the resource
 			   - logical path sometimes it is not good to put the physical path of your resource
 			   - may be static(served as is) or dynamic(usually a script) resource
 			   - query: starts with a question mark
 			          : typically provided as key = value pairs with ampersand(&) separators between key/value pairs.
 			   - Special characters are URL encoded transformed into something else
 			   			E.g. whitespaces =  +
 			   			     / = its ASCI Code
 			   - Some are converted into ASCII codes
 			   - Fragment Identifier = starts with a # followed by a key value
 			   						 = typically used on browser end.
 			   - Schemes can be omitted with relative URL
 			   		*Absolute URL - starts with a scheme(Full address)
 			   		*Relative URL - relative to some place on element


Standard methods:
  Get- retreive resource
     - most commonly used HTTP method
  Head- same as get but body of response is not sent link out- broken line
  Post- submit data to be processed 
Extension methods - defined capability for protocol

Request URI - url of the resource requested.

Message headers (general, request, and/or entity headers)
example:
	fieldname: value
	useragent:
	server:

HTTP 1.1 requires atleast the host request header to be provided.

Header fields:
General header fields - both client and server appears to request and response.
Request - applicable to request; client side
Response - applicable to response; server side
Entity - payload of the message

Empty line(CRLF)
Message body a.k.a payload

SC - server configuration

HTTP response message
	Status line - (CRLF: terminated line consisting of three space-separated)
		Informational (1xx) -  status codes starts with 1.
		Success (2xx) - successful
		Redirection (3xx) - redirection
		Client (4xx) - error on the client side
		Server (5xx) - request wasn't handled properly; server's fault
        
    404 NOT FOUND 404 is status code NOT FOUND is reason phrase
    
	HTTP protocol version
	Status code - explicit numeric value; SC to SC
	Reason phrase

*Each request/response generated passed through headers.	

Cache validation - check if same file cahce and server
response header fields- only used by servers
accept- ranges-allows partial resource allocation
age - how long has response been generated
entity tag(ETag) - based on size of resource
location - for redirection to another page
proxy - authenticate-authentication
retry-after-service is not available try at another time
server - server info
carry - change a certain option

Entity Header Fields - body of response that describes the entity
allow- methods that can be called
content - encoding-type of folder(zip)
content - language-language characteristics
content - length-size of the payload
content-location
content-mp5
content range - receive a partial resource
content-type - format of file
expires - how long until a resource expires
last modified - reference value


Status Codes
Informational(1xx)
100 continue-continue
101 switching protocol-when a client uses upgrade header

Success(2xx)
200 ok-success
201 created-it has been created
202 accept-accept but not processed yet
203 nonauthorized information-some are not from origin
204 no content-succesful but doesnt return aything
205 reject context-reject for data entry
206 partial content-not whole page loaded

Redirection(3xx)
300 multiple choices-more than 1 version(html, txt)
301 moved permanently- resource has moved to another address
302 found-redirect to another page
303 see other-redirect to another page
304 not modified-redirect to cache
305 use proxy-access from proxy
306 unused-reesrved
307 temporary direct-not accesible here for a temporary time only

Client Error(4xx)
400 bad request-wrong request
401 unauthorized-access protected
402 payment required-used in ecommerce
403 forbidden-not supposed to access resource
404 not found-
405 method not allowed-put in not allowed
406 not acceptable-everything server will generate client will not accept
407 proxy authentiaction required-authentication from proxy
408 request time-out-certain amount of time
409 conflict-cannot be done because conflict in state of resource
410 gone-no forwarding address
411 length requires-required to specify the content length
412 precondition failed-cannot proceed because failed
413 request entity too large-payload cant handle size
414 request-uri too large-request uri is too long
415 unsupported media type-ex. jpeg format only
416 request range not satisfiable-entity size not found
417 expectation failed-
426 upgrade required

Server Error(5xx)
500 internal error-invalid option
501 not implemented-cannot handle/wrong spelling
502 bad gateway-server is full or overloaded
503 service unavailable-when doing maintainance
504 gateway time-out-server is full or overloaded
505 http version not supported-wrong version


HTTP IS EXTENSIBLE
